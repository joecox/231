---
title: Homework 2 CS 231
author: Joe Cox, Christian Gram Kalhauge
...

# Assignment 1

> *Include* $\tAnd{t_1}{t_2}$ *in the semantics in a short-circuited
> manner.*

> a) Add rules to the small-step operational semantics.

\infrule[E-And]{t_1 \stepsto t_1'}{\tAnd{t_1}{t_2} \stepsto
\tAnd{t_1'}{t_2}}
\infrule[E-AndTrue]{}{\tAnd{\tTrue}{t_2} \stepsto t_2}
\infrule[E-AndFalse]{}{\tAnd{\tFalse}{t_2} \stepsto \tFalse}

> b) Add rules to the type system.

\infrule[T-And]{t_1 \typeof \TBool \andalso t_2 \typeof \TBool}{\tAnd{t_2}{t_2} \typeof \TBool}

> c) Provide a proof of progress. Assuming that it is performed by
> induction on $t \typeof T$.

\begin{theorem}[Progress]\label{thm:progress}
If $t \typeof T$, then $t \in \Value$ or $t \stepsto t'$
\end{theorem}

In this proof we will use the Canonical Form lemma for booleans.

\begin{lemma}[Canonical Form $\TBool$]\label{lem:canonicalBool}
If $t \in \Value$ and $t \typeof \TBool$, then $t = \tTrue$ or $t =
\tFalse$.
\end{lemma}

The induction hypothesis is: if $t_0 \typeof T_0$ and $t_0 \typeof T_0
\subderv t \typeof T$, then $t_0 \in \Value$ or $t_0 \stepsto t_0'$.
Assuming initial case analysis on $t \typeof T$ and we have reached the
case \infr{T-And}: $t = \tAnd{t_1}{t_2}$, $T = \TBool$, $t \typeof
\TBool$, $t_1 \typeof \TBool$, and $t_2 \typeof \TBool$ . $t$ is not a
value, so it has to step to prove the theorem. Given the induction
hypothesis we know that $t_1$ either does step or is a value.

*  Case $t_1 \in \Value$: Using the \cref{lem:canonicalBool}, we
   can see that either $t_1 = \tTrue$, where $t' = t_2$
   \infr{E-AndTrue} or $t_1 = \tFalse$, where $t' = \tFalse$
   \infr{E-AndFalse}, both satisfying the theorem.

*  Case $t_1 \stepsto t_1'$: By \infr{E-And} we then know that there
   exists a $t' = \tAnd{t_1'}{t_2}$.

Since that for all cases, there can be found a $t'$ such that $t
\stepsto t'$, we have proven \cref{thm:progress}.

> d) Provide a proof of preservation, with the same assumptions as in c).

\begin{theorem}[Preservation]\label{thm:preservation}
If $t \typeof T$ and $t \stepsto t'$, then $t' \typeof T$
\end{theorem}

The induction hypothesis is: if $t_0 \typeof T_0$, $t_0 \stepsto
t_0'$, and $t_0 \typeof T_0 \subderv t \typeof T$, then $t'_0 \typeof
T_0$. Continuing the case analysis with \infr{T-And}: $t =
\tAnd{t_1}{t_2}$, $T = \TBool$, $t \typeof \TBool$, $t_1 \typeof
\TBool$, and $t_2 \typeof \TBool$. We then do case analysis on $t
\stepsto t'$, where for each case $t' \typeof \TBool$, to prove the
theorem.

*  Case \infr{E-AndTrue}: $t_1 = \tTrue$ and $t' = t_2$. We know the
   type of $t_2 : \TBool$ and therefore also the type of $t' : \TBool$.

*  Case \infr{E-AndFalse}: $t_1 = \tFalse$ and $t' = \tFalse$. We know
   the type of $\tTrue : \TBool$ from \infr{T-True} and therefore also
   the type of $t' : \TBool$

*  Case \infr{E-And}: $t' = \tAnd{t'_1}{t_2}$ and $t_1 \stepsto t_1'$.
   Using the induction hypothesis we know that $t_1$ preserves the
   type under stepping $t'_1 \typeof \TBool$. Using \infr{T-And}, can we
   see that the $t' \typeof \TBool$, because both $t_1' \typeof \TBool$
   and $t_2 \typeof \TBool$.

For all cases have we proven that we can build a derivation $t' \typeof
\TBool$. Therefore we have also proven \cref{thm:preservation}.


# Assignment 2

> a) Demonstrate that $\tAnd{t_1}{t_2}$ can be treated like syntactic
> sugar, by providing a new operational semantic for the term.

\infrule[E-AndSS]{}{\tAnd{t_1}{t_2} \stepsto \tIf{t_1}{t_2}{\tFalse}}

> b) Considering a eager version of $\tAnd{t_1}{t_2}$, can it still be
> formulated as syntactic sugar?

\infrule[E-AndEagerSS]{}{
 \tAnd{t_1}{t_2} \stepsto \tIf{t_1}
   {t_2}
   {(\tIf{t_2}{\tFalse}{\tFalse})}
}

# Assignment 3

(a) *Remove the rule \infr{E-IfFalse}:*

    Would invalidate progress: without \infr{E-IfFalse},
    $t = \tIf{\tFalse}{\tTrue}{\tFalse}$ is not a value and can't step. However,
    because $t \stepsto t'$ is an antecedent of the preservation implication and
    $t$ cannot step, then preservation remains unaffected.

(b) *Add the following axiom to the type system:*

    \infrule[]{}{0 \typeof \TBool}

    This type rule would invalidate the boolean Canonical Form
    (\cref{lem:canonicalBool}), transitively invalidating the progress
    theorem. $\tIf{0}{\tFalse}{\tTrue} \typeof \TBool$ is well-typed but cannot
    step, because $0$ does not step.  However, because $0$ cannot step,
    preservation remains unaffected.

(c) *Add the following axiom:*

    \infrule[]{}{\tIf{t_1}{t_2}{t_3} \stepsto t_2}

    The new rule will introduce nondeterminism in the operational
    semantics, but would not effect progress and preservation.

(d) *Add the following rules:*

    \infrule[]{}{\tPlus{\tFalse}{\tFalse} \stepsto \tFalse}

    \infrule[]{}{\tPlus{\tTrue}{\tTrue} \stepsto \tTrue}

    \infrule[]{
        t_1 \typeof \TBool \andalso t_2 \typeof \TBool
        }{
        \tPlus{t_1}{t_2} \typeof \TInt
        }

    Progress is not preserved in the cases where the booleans do not
    match $\tPlus{\tTrue}{\tFalse} : \TInt$. Even though it does type
    check, it does not step.

    Also preservation is not preserved, as the
    $\tPlus{\tFalse}{\tFalse} \stepsto \tFalse$, but $\tFalse$
    does not typecheck to $\TInt$.

(e) *Add the following rules:*

    \infrule[]{}{\tIf{0}{t_2}{t_3} \stepsto t_2}

    \infrule[]{
        t_1 \typeof \TInt \andalso t_2 \typeof T \andalso t_3 \typeof T
    }{\tIf{0}{t_2}{t_3} \typeof T}

    Progress is not preserved in the cases where the guard of the
    expression is a number other than zero. Even though
    $\tIf{1}{\tTrue}{\tTrue} \typeof \TBool$ the expression cannot step.

    Preservation is still valid as all the expressions that can step are
    able to maintain their types.

# Assignment 4

> *Consider again the language of just booleans and integers*:

(a) For all possible $t' \typeof T$, we can find a $t$ such that $t \stepsto
    t'$ in the following manner:

    $t = \tIf{\tTrue}{t'}{t_3}$

    We can put any $t'$ into the then clause of an If expression, because the
    If expression accepts any valid term and $t' \typeof T$ shows that $t'$ is
    a valid term.  By $\infr{E-IfTrue}$, $t \stepsto t'$.  $t$ need not be
    well-typed, so we do not care what $t_3$ is.

(b) This is not a true theorem.

    *Counterexample:*

    $t = \tIf{\tTrue}{1}{\tFalse}$.  This term is not well-typed, because
    $t_2 \typeof \TInt$ and $t_3 \typeof \TBool$, by $\infr{T-Num}$ and
    $\infr{T-Bool}$.  However, $t \stepsto t' = 1$, and $t' \typeof \TInt$
    by $\infr{T-Num}$.

# Assignment 5

  *See hw2a.ml.*

# Assignment 6

  *See hw2b.ml.*

# Assignment 7

\infrule[E-Refl]{}{t \multistep t}

\infrule[E-Step]{t \stepsto t'}{t \multistep t'}

\infrule[E-Trans]{t \multistep t'' \andalso t'' \multistep t'}{t \multistep t'}

\begin{theorem}[$\Omega$ always steps to itself]\label{thm:omega}
If $\tApp{(\tFun{x}{\tApp{x}{x}})}{\tFun{x}{\tApp{x}{x}}} \multistep t$
then $t = \tApp{(\tFun{x}{\tApp{x}{x}})}{\tFun{x}{\tApp{x}{x}}}$.
\end{theorem}

We prove the theorem using induction on $\Omega \multistep t$. The
induction hypothesis is if $\Omega \multistep t_0 \subderv \Omega
\multistep t$, then $t_0 = \Omega$. Starting with case analysis on
$\Omega \multistep t$:

1. Case \infr{E-Refl}, directly from the rule $t = \Omega$.

2. Case \infr{E-Step}, we get $\Omega \stepsto t$. By using case analysis on
   $\Omega \stepsto t$, can we see that \infr{E-AppBeta} is the
   only rule that apply, and that $\Omega \stepsto \Omega$. This means
   that there exist only one value to $t = \Omega$.

   \infrule[E-AppBeta]{}{
   \tApp{(\tFun{x}{\tApp{x}{x}})}{\tFun{x}{\tApp{x}{x}}}
   \stepsto
   \tApp{(\tFun{x}{\tApp{x}{x}})}{(\tFun{x}{\tApp{x}{x}})}
   }

3. Case \infr{E-Trans}, we get $\Omega \multistep t''$ and $t'' \multistep
   t$. Because $\Omega \multistep t'' \subderv \Omega \multistep t$,
   can we use the induction hypothesis to show that $t'' = \Omega$.
   This gives us that $\Omega \multistep t$, which we again can apply
   the induction hypothesis on to get that $t = \Omega$.

We have thereby shown $t = \Omega$ for all cases of $\Omega \multistep
t$, and therefore also \cref{thm:omega}.
